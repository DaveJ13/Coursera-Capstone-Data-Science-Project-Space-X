from jupyter_plotly_dash import JupyterDash
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output, State
import plotly.graph_objects as go
import plotly.express as px
from dash import no_update

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a dash application
app = JupyterDash(__name__)

uls = spacex_df['Launch Site'].unique().tolist()
allsites = []
allsites.append({'label': 'All Sites', 'value': 'All Sites'})
for site in uls:
    allsites.append({'label': site, 'value': site})

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                # dcc.Dropdown(id='site-dropdown',...)
                                dcc.Dropdown(id = 'site_dropdown',
                                            options = allsites,
                                            value = 'All Sites',
                                            placeholder = 'Select a launch site here',
                                            searchable = True),
                                

                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                html.Div(dcc.Graph(id='success-pie-chart')),
                                

                                html.P("Payload range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                #dcc.RangeSlider(id='payload-slider',...)
                                dcc.RangeSlider(id = 'payload_slider', 
                                               min = 0,
                                               max = 10000, 
                                               step = 1000,
                                               marks = {0: '0',
                                                       1000: '1000',
                                                       2000: '2000',
                                                       3000: '3000',
                                                       4000: '4000',
                                                       5000: '5000',
                                                       6000: '6000',
                                                       7000: '7000',
                                                       8000: '8000',
                                                       9000: '9000',
                                                       10000: '10000'},
                                               value = [min_payload, max_payload]),

                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
@app.callback(Output(component_id = 'success-pie-chart', component_property = 'figure'),
                [Input(component_id = 'site_dropdown', component_property = 'value')])
def updatepie_chart(site_dropdown):
    if (site-dropdown == 'All Sites'):
        df = spacex_df[spacex_df['class'] == 1]
        fig = px.pie(df, 
        names = 'Launch Site',
        hole = .3,
        title = 'Successful Launches by Site')
    else:
        df = spacex_df.loc[spacex_df['Launch Site'] == 'site_dropdown']
        fig = px.pie(df,
        names = 'class',
        hole = .3,
        title = 'Total successful launches for '+site_dropdown)
    return fig
        
                 
# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output
@app.callback(Output(component_id = 'success-payload-scatter-chart', component_property = 'figure'),
                [Input(component_id = 'site_dropdown', component_property = 'value'),
                Input(component_id = 'payload_slider', component_property = 'value')])
def updatescatter_chart(site_dropdown, payload_slider ):
    if site_dropdown == 'All Sites':
        low, high = payload_slider
        df = spacex_df
        mask = (df['Payload Mass (kg)'] > low) & (df['Payload Mass (kg)'] < high)
        fig = px.scatter(df['mask'], x = 'Payload Mass (kg)', y = 'class', 
        color = 'Booster Version Category',
        size = 'Payload Mass (kg)',
        hover_data = ['Payload Mass (kg)'])
    else:
        low, high = payload_slider
        df = spacex_df.loc[spacex_df['Launch Site'] == site_dropdown]
        mask = (df['Payload Mass (kg)'] > low) & (df['Payload Mass (kg)'] < high)
        fig = px.scatter(df['mask'], x = 'Payload Mass (kg)', y = 'class', 
        color = 'Booster Version Category',
        size = 'Payload Mass (kg)',
        hover_data = ['Payload Mass (kg)'])
    return fig
# Run the app
app
